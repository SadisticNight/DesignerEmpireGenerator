.- Solamente queda implementar gymnasium!!
    |- interfaz_gym.py - Define y registra tu entorno de Gymnasium. Aquí se implementan los métodos reset(), step(action), render(), y close(). También es donde defines el espacio de acción y observación.
    |- train_agent.py - Este archivo será para configurar, entrenar y evaluar tu modelo de aprendizaje por refuerzo usando Stable Baselines3. Aquí también puedes incluir código para visualizar el comportamiento del agente.
    |- custom_policy.py - Este archivo contiene la definición de tu política personalizada, donde defines la arquitectura de la red neuronal que el modelo utilizará para aprender a jugar tu juego. Aquí puedes experimentar con diferentes configuraciones de red y técnicas avanzadas de aprendizaje profundo.

.- Es probable ajustar estadisticas en el futuro.

.- Mejorar la fuerza bruta.
    |- Podemos crear un nuevo archivo que contenga la a logica de estadisticas.py para dar un mejor resultado y luego llamarlo a la fuerza bruta para ejecutarlo similar a areas.py
        |- Aqui podemos hacer cosas como si la propocion industria y comercio se ajuste
            |-Si hay mas insdustria que comercio, entonces pongamos mas comercios y viceversa. (siempre y cuando no sea la primera linea)
        |- Tambien podemos hacer que si falta gente para trabajar se ubiquen mas casas, o si hay mucha gente sin trabajo se pongan otros edificios.
        |- Podemos hacer que si algún servicio no esta en positivo se ponga un servicio. (escuela, hospital, policia, bombero)
        |- Podemos hacer que si los numeros de alimento, agua, energia y basura estan en negativos, se prioricen esos edificios, y se pause hasta volver a negativo.
        |- Todo puede ser compatible con la logica de "eliminar edificio de la lista si no se puede ubicar en la celda"